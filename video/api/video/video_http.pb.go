// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.1
// source: api/video/video.proto

package video

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVideoServiceCreateVideo = "/video.VideoService/CreateVideo"
const OperationVideoServiceDeleteVideo = "/video.VideoService/DeleteVideo"
const OperationVideoServiceGenerateThumbnail = "/video.VideoService/GenerateThumbnail"
const OperationVideoServiceGetVideo = "/video.VideoService/GetVideo"
const OperationVideoServiceGetVideoByUserID = "/video.VideoService/GetVideoByUserID"
const OperationVideoServiceTranscodeVideo = "/video.VideoService/TranscodeVideo"

type VideoServiceHTTPServer interface {
	// CreateVideo Create a new video (metadata)
	CreateVideo(context.Context, *CreateVideoRequest) (*VideoResponse, error)
	// DeleteVideo Delete a video
	DeleteVideo(context.Context, *DeleteVideoRequest) (*DeleteVideoResponse, error)
	// GenerateThumbnail Generate thumbnail for a video
	GenerateThumbnail(context.Context, *GenerateThumbnailRequest) (*GenerateThumbnailResponse, error)
	// GetVideo Get a video by ID
	GetVideo(context.Context, *GetVideoRequest) (*VideoResponse, error)
	// GetVideoByUserID Get videos by user ID
	GetVideoByUserID(context.Context, *GetVideoByUserIDRequest) (*VideoListResponse, error)
	// TranscodeVideo Transcode a video
	TranscodeVideo(context.Context, *TranscodeVideoRequest) (*TranscodeVideoResponse, error)
}

func RegisterVideoServiceHTTPServer(s *http.Server, srv VideoServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/videos", _VideoService_CreateVideo0_HTTP_Handler(srv))
	r.POST("/api/v1/videos/{video_id}/transcode", _VideoService_TranscodeVideo0_HTTP_Handler(srv))
	r.POST("/api/v1/videos/{video_id}/thumbnail", _VideoService_GenerateThumbnail0_HTTP_Handler(srv))
	r.GET("/api/v1/videos/{id}", _VideoService_GetVideo0_HTTP_Handler(srv))
	r.DELETE("/api/v1/videos/{id}", _VideoService_DeleteVideo0_HTTP_Handler(srv))
	r.GET("/api/v1/users/{user_id}/videos", _VideoService_GetVideoByUserID0_HTTP_Handler(srv))
}

func _VideoService_CreateVideo0_HTTP_Handler(srv VideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoServiceCreateVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateVideo(ctx, req.(*CreateVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoService_TranscodeVideo0_HTTP_Handler(srv VideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TranscodeVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoServiceTranscodeVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TranscodeVideo(ctx, req.(*TranscodeVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TranscodeVideoResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoService_GenerateThumbnail0_HTTP_Handler(srv VideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateThumbnailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoServiceGenerateThumbnail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateThumbnail(ctx, req.(*GenerateThumbnailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateThumbnailResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoService_GetVideo0_HTTP_Handler(srv VideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoServiceGetVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVideo(ctx, req.(*GetVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoService_DeleteVideo0_HTTP_Handler(srv VideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteVideoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoServiceDeleteVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteVideo(ctx, req.(*DeleteVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteVideoResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoService_GetVideoByUserID0_HTTP_Handler(srv VideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoByUserIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoServiceGetVideoByUserID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVideoByUserID(ctx, req.(*GetVideoByUserIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoListResponse)
		return ctx.Result(200, reply)
	}
}

type VideoServiceHTTPClient interface {
	CreateVideo(ctx context.Context, req *CreateVideoRequest, opts ...http.CallOption) (rsp *VideoResponse, err error)
	DeleteVideo(ctx context.Context, req *DeleteVideoRequest, opts ...http.CallOption) (rsp *DeleteVideoResponse, err error)
	GenerateThumbnail(ctx context.Context, req *GenerateThumbnailRequest, opts ...http.CallOption) (rsp *GenerateThumbnailResponse, err error)
	GetVideo(ctx context.Context, req *GetVideoRequest, opts ...http.CallOption) (rsp *VideoResponse, err error)
	GetVideoByUserID(ctx context.Context, req *GetVideoByUserIDRequest, opts ...http.CallOption) (rsp *VideoListResponse, err error)
	TranscodeVideo(ctx context.Context, req *TranscodeVideoRequest, opts ...http.CallOption) (rsp *TranscodeVideoResponse, err error)
}

type VideoServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoServiceHTTPClient(client *http.Client) VideoServiceHTTPClient {
	return &VideoServiceHTTPClientImpl{client}
}

func (c *VideoServiceHTTPClientImpl) CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...http.CallOption) (*VideoResponse, error) {
	var out VideoResponse
	pattern := "/api/v1/videos"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoServiceCreateVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoServiceHTTPClientImpl) DeleteVideo(ctx context.Context, in *DeleteVideoRequest, opts ...http.CallOption) (*DeleteVideoResponse, error) {
	var out DeleteVideoResponse
	pattern := "/api/v1/videos/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoServiceDeleteVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoServiceHTTPClientImpl) GenerateThumbnail(ctx context.Context, in *GenerateThumbnailRequest, opts ...http.CallOption) (*GenerateThumbnailResponse, error) {
	var out GenerateThumbnailResponse
	pattern := "/api/v1/videos/{video_id}/thumbnail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoServiceGenerateThumbnail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoServiceHTTPClientImpl) GetVideo(ctx context.Context, in *GetVideoRequest, opts ...http.CallOption) (*VideoResponse, error) {
	var out VideoResponse
	pattern := "/api/v1/videos/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoServiceGetVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoServiceHTTPClientImpl) GetVideoByUserID(ctx context.Context, in *GetVideoByUserIDRequest, opts ...http.CallOption) (*VideoListResponse, error) {
	var out VideoListResponse
	pattern := "/api/v1/users/{user_id}/videos"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoServiceGetVideoByUserID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoServiceHTTPClientImpl) TranscodeVideo(ctx context.Context, in *TranscodeVideoRequest, opts ...http.CallOption) (*TranscodeVideoResponse, error) {
	var out TranscodeVideoResponse
	pattern := "/api/v1/videos/{video_id}/transcode"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoServiceTranscodeVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
