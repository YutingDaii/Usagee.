// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.1
// source: api/user/user.proto

package user

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserDeleteUser = "/api.user.User/DeleteUser"
const OperationUserFollowUser = "/api.user.User/FollowUser"
const OperationUserGetUser = "/api.user.User/GetUser"
const OperationUserListFollowers = "/api.user.User/ListFollowers"
const OperationUserListFollowing = "/api.user.User/ListFollowing"
const OperationUserLogin = "/api.user.User/Login"
const OperationUserRegister = "/api.user.User/Register"
const OperationUserSendVerificationCode = "/api.user.User/SendVerificationCode"
const OperationUserUpdateUser = "/api.user.User/UpdateUser"
const OperationUserVerifyCode = "/api.user.User/VerifyCode"

type UserHTTPServer interface {
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error)
	FollowUser(context.Context, *FollowUserReq) (*FollowUserReply, error)
	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)
	ListFollowers(context.Context, *ListFollowersReq) (*ListFollowersReply, error)
	ListFollowing(context.Context, *ListFollowingReq) (*ListFollowingReply, error)
	// Login Login
	Login(context.Context, *LoginUserReq) (*LoginUserReply, error)
	// Register Register
	Register(context.Context, *RegisterUserReq) (*RegisterUserReply, error)
	// SendVerificationCode Send verification code
	SendVerificationCode(context.Context, *SendVerificationCodeReq) (*SendVerificationCodeReply, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error)
	// VerifyCode Verify code
	VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeReply, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/api/users/send_verification_code", _User_SendVerificationCode0_HTTP_Handler(srv))
	r.POST("/api/users/verify_code", _User_VerifyCode0_HTTP_Handler(srv))
	r.POST("/api/users/register", _User_Register0_HTTP_Handler(srv))
	r.POST("/api/users/login", _User_Login0_HTTP_Handler(srv))
	r.POST("/api/users/{id}/edit", _User_UpdateUser0_HTTP_Handler(srv))
	r.POST("/api/users/{id}/del", _User_DeleteUser0_HTTP_Handler(srv))
	r.GET("/api/users/{id}/profile", _User_GetUser0_HTTP_Handler(srv))
	r.GET("/api/users/{id}/followers", _User_ListFollowers0_HTTP_Handler(srv))
	r.GET("/api/users/{id}/following", _User_ListFollowing0_HTTP_Handler(srv))
	r.POST("/api/users/{id}/follow", _User_FollowUser0_HTTP_Handler(srv))
}

func _User_SendVerificationCode0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendVerificationCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSendVerificationCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendVerificationCode(ctx, req.(*SendVerificationCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendVerificationCodeReply)
		return ctx.Result(200, reply)
	}
}

func _User_VerifyCode0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserVerifyCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyCode(ctx, req.(*VerifyCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyCodeReply)
		return ctx.Result(200, reply)
	}
}

func _User_Register0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_Login0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_UpdateUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_DeleteUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_GetUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_ListFollowers0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFollowersReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserListFollowers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFollowers(ctx, req.(*ListFollowersReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFollowersReply)
		return ctx.Result(200, reply)
	}
}

func _User_ListFollowing0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFollowingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserListFollowing)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFollowing(ctx, req.(*ListFollowingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFollowingReply)
		return ctx.Result(200, reply)
	}
}

func _User_FollowUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserFollowUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowUser(ctx, req.(*FollowUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowUserReply)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	DeleteUser(ctx context.Context, req *DeleteUserReq, opts ...http.CallOption) (rsp *DeleteUserReply, err error)
	FollowUser(ctx context.Context, req *FollowUserReq, opts ...http.CallOption) (rsp *FollowUserReply, err error)
	GetUser(ctx context.Context, req *GetUserReq, opts ...http.CallOption) (rsp *GetUserReply, err error)
	ListFollowers(ctx context.Context, req *ListFollowersReq, opts ...http.CallOption) (rsp *ListFollowersReply, err error)
	ListFollowing(ctx context.Context, req *ListFollowingReq, opts ...http.CallOption) (rsp *ListFollowingReply, err error)
	Login(ctx context.Context, req *LoginUserReq, opts ...http.CallOption) (rsp *LoginUserReply, err error)
	Register(ctx context.Context, req *RegisterUserReq, opts ...http.CallOption) (rsp *RegisterUserReply, err error)
	SendVerificationCode(ctx context.Context, req *SendVerificationCodeReq, opts ...http.CallOption) (rsp *SendVerificationCodeReply, err error)
	UpdateUser(ctx context.Context, req *UpdateUserReq, opts ...http.CallOption) (rsp *UpdateUserReply, err error)
	VerifyCode(ctx context.Context, req *VerifyCodeReq, opts ...http.CallOption) (rsp *VerifyCodeReply, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...http.CallOption) (*DeleteUserReply, error) {
	var out DeleteUserReply
	pattern := "/api/users/{id}/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) FollowUser(ctx context.Context, in *FollowUserReq, opts ...http.CallOption) (*FollowUserReply, error) {
	var out FollowUserReply
	pattern := "/api/users/{id}/follow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserFollowUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) GetUser(ctx context.Context, in *GetUserReq, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/api/users/{id}/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) ListFollowers(ctx context.Context, in *ListFollowersReq, opts ...http.CallOption) (*ListFollowersReply, error) {
	var out ListFollowersReply
	pattern := "/api/users/{id}/followers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserListFollowers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) ListFollowing(ctx context.Context, in *ListFollowingReq, opts ...http.CallOption) (*ListFollowingReply, error) {
	var out ListFollowingReply
	pattern := "/api/users/{id}/following"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserListFollowing))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) Login(ctx context.Context, in *LoginUserReq, opts ...http.CallOption) (*LoginUserReply, error) {
	var out LoginUserReply
	pattern := "/api/users/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) Register(ctx context.Context, in *RegisterUserReq, opts ...http.CallOption) (*RegisterUserReply, error) {
	var out RegisterUserReply
	pattern := "/api/users/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) SendVerificationCode(ctx context.Context, in *SendVerificationCodeReq, opts ...http.CallOption) (*SendVerificationCodeReply, error) {
	var out SendVerificationCodeReply
	pattern := "/api/users/send_verification_code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSendVerificationCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...http.CallOption) (*UpdateUserReply, error) {
	var out UpdateUserReply
	pattern := "/api/users/{id}/edit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...http.CallOption) (*VerifyCodeReply, error) {
	var out VerifyCodeReply
	pattern := "/api/users/verify_code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserVerifyCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
