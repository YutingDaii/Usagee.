// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: interaction/interaction.proto

package interaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InteractionService_LikeVideo_FullMethodName         = "/interaction.InteractionService/LikeVideo"
	InteractionService_UnlikeVideo_FullMethodName       = "/interaction.InteractionService/UnlikeVideo"
	InteractionService_GetVideoLikeCount_FullMethodName = "/interaction.InteractionService/GetVideoLikeCount"
	InteractionService_PostComment_FullMethodName       = "/interaction.InteractionService/PostComment"
	InteractionService_ListComments_FullMethodName      = "/interaction.InteractionService/ListComments"
	InteractionService_FavoriteVideo_FullMethodName     = "/interaction.InteractionService/FavoriteVideo"
	InteractionService_UnfavoriteVideo_FullMethodName   = "/interaction.InteractionService/UnfavoriteVideo"
	InteractionService_ListFavorites_FullMethodName     = "/interaction.InteractionService/ListFavorites"
)

// InteractionServiceClient is the client API for InteractionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interaction Service definition
type InteractionServiceClient interface {
	// LikeVideo handles liking a video.
	LikeVideo(ctx context.Context, in *LikeVideoRequest, opts ...grpc.CallOption) (*LikeVideoReply, error)
	// UnlikeVideo handles unliking a video.
	UnlikeVideo(ctx context.Context, in *UnlikeVideoRequest, opts ...grpc.CallOption) (*UnlikeVideoReply, error)
	// GetVideoLikeCount handles getting the like count for a video.
	GetVideoLikeCount(ctx context.Context, in *GetVideoLikeCountRequest, opts ...grpc.CallOption) (*GetVideoLikeCountReply, error)
	// PostComment handles posting a comment on a video or replying to a comment.
	PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentReply, error)
	// ListComments handles listing comments for a video.
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsReply, error)
	// FavoriteVideo handles adding a video to favorites.
	FavoriteVideo(ctx context.Context, in *FavoriteVideoRequest, opts ...grpc.CallOption) (*FavoriteVideoReply, error)
	// UnfavoriteVideo handles removing a video from favorites.
	UnfavoriteVideo(ctx context.Context, in *UnfavoriteVideoRequest, opts ...grpc.CallOption) (*UnfavoriteVideoReply, error)
	// ListFavorites handles listing a user's favorite videos.
	ListFavorites(ctx context.Context, in *ListFavoritesRequest, opts ...grpc.CallOption) (*ListFavoritesReply, error)
}

type interactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractionServiceClient(cc grpc.ClientConnInterface) InteractionServiceClient {
	return &interactionServiceClient{cc}
}

func (c *interactionServiceClient) LikeVideo(ctx context.Context, in *LikeVideoRequest, opts ...grpc.CallOption) (*LikeVideoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeVideoReply)
	err := c.cc.Invoke(ctx, InteractionService_LikeVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) UnlikeVideo(ctx context.Context, in *UnlikeVideoRequest, opts ...grpc.CallOption) (*UnlikeVideoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlikeVideoReply)
	err := c.cc.Invoke(ctx, InteractionService_UnlikeVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) GetVideoLikeCount(ctx context.Context, in *GetVideoLikeCountRequest, opts ...grpc.CallOption) (*GetVideoLikeCountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoLikeCountReply)
	err := c.cc.Invoke(ctx, InteractionService_GetVideoLikeCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostCommentReply)
	err := c.cc.Invoke(ctx, InteractionService_PostComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommentsReply)
	err := c.cc.Invoke(ctx, InteractionService_ListComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) FavoriteVideo(ctx context.Context, in *FavoriteVideoRequest, opts ...grpc.CallOption) (*FavoriteVideoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteVideoReply)
	err := c.cc.Invoke(ctx, InteractionService_FavoriteVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) UnfavoriteVideo(ctx context.Context, in *UnfavoriteVideoRequest, opts ...grpc.CallOption) (*UnfavoriteVideoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfavoriteVideoReply)
	err := c.cc.Invoke(ctx, InteractionService_UnfavoriteVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactionServiceClient) ListFavorites(ctx context.Context, in *ListFavoritesRequest, opts ...grpc.CallOption) (*ListFavoritesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFavoritesReply)
	err := c.cc.Invoke(ctx, InteractionService_ListFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractionServiceServer is the server API for InteractionService service.
// All implementations must embed UnimplementedInteractionServiceServer
// for forward compatibility.
//
// Interaction Service definition
type InteractionServiceServer interface {
	// LikeVideo handles liking a video.
	LikeVideo(context.Context, *LikeVideoRequest) (*LikeVideoReply, error)
	// UnlikeVideo handles unliking a video.
	UnlikeVideo(context.Context, *UnlikeVideoRequest) (*UnlikeVideoReply, error)
	// GetVideoLikeCount handles getting the like count for a video.
	GetVideoLikeCount(context.Context, *GetVideoLikeCountRequest) (*GetVideoLikeCountReply, error)
	// PostComment handles posting a comment on a video or replying to a comment.
	PostComment(context.Context, *PostCommentRequest) (*PostCommentReply, error)
	// ListComments handles listing comments for a video.
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsReply, error)
	// FavoriteVideo handles adding a video to favorites.
	FavoriteVideo(context.Context, *FavoriteVideoRequest) (*FavoriteVideoReply, error)
	// UnfavoriteVideo handles removing a video from favorites.
	UnfavoriteVideo(context.Context, *UnfavoriteVideoRequest) (*UnfavoriteVideoReply, error)
	// ListFavorites handles listing a user's favorite videos.
	ListFavorites(context.Context, *ListFavoritesRequest) (*ListFavoritesReply, error)
	mustEmbedUnimplementedInteractionServiceServer()
}

// UnimplementedInteractionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInteractionServiceServer struct{}

func (UnimplementedInteractionServiceServer) LikeVideo(context.Context, *LikeVideoRequest) (*LikeVideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeVideo not implemented")
}
func (UnimplementedInteractionServiceServer) UnlikeVideo(context.Context, *UnlikeVideoRequest) (*UnlikeVideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeVideo not implemented")
}
func (UnimplementedInteractionServiceServer) GetVideoLikeCount(context.Context, *GetVideoLikeCountRequest) (*GetVideoLikeCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoLikeCount not implemented")
}
func (UnimplementedInteractionServiceServer) PostComment(context.Context, *PostCommentRequest) (*PostCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComment not implemented")
}
func (UnimplementedInteractionServiceServer) ListComments(context.Context, *ListCommentsRequest) (*ListCommentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (UnimplementedInteractionServiceServer) FavoriteVideo(context.Context, *FavoriteVideoRequest) (*FavoriteVideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavoriteVideo not implemented")
}
func (UnimplementedInteractionServiceServer) UnfavoriteVideo(context.Context, *UnfavoriteVideoRequest) (*UnfavoriteVideoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfavoriteVideo not implemented")
}
func (UnimplementedInteractionServiceServer) ListFavorites(context.Context, *ListFavoritesRequest) (*ListFavoritesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavorites not implemented")
}
func (UnimplementedInteractionServiceServer) mustEmbedUnimplementedInteractionServiceServer() {}
func (UnimplementedInteractionServiceServer) testEmbeddedByValue()                            {}

// UnsafeInteractionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractionServiceServer will
// result in compilation errors.
type UnsafeInteractionServiceServer interface {
	mustEmbedUnimplementedInteractionServiceServer()
}

func RegisterInteractionServiceServer(s grpc.ServiceRegistrar, srv InteractionServiceServer) {
	// If the following call pancis, it indicates UnimplementedInteractionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InteractionService_ServiceDesc, srv)
}

func _InteractionService_LikeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).LikeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_LikeVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).LikeVideo(ctx, req.(*LikeVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_UnlikeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).UnlikeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_UnlikeVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).UnlikeVideo(ctx, req.(*UnlikeVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_GetVideoLikeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoLikeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).GetVideoLikeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_GetVideoLikeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).GetVideoLikeCount(ctx, req.(*GetVideoLikeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_PostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).PostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_PostComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).PostComment(ctx, req.(*PostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_ListComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_FavoriteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).FavoriteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_FavoriteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).FavoriteVideo(ctx, req.(*FavoriteVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_UnfavoriteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfavoriteVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).UnfavoriteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_UnfavoriteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).UnfavoriteVideo(ctx, req.(*UnfavoriteVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractionService_ListFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractionServiceServer).ListFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractionService_ListFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractionServiceServer).ListFavorites(ctx, req.(*ListFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractionService_ServiceDesc is the grpc.ServiceDesc for InteractionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interaction.InteractionService",
	HandlerType: (*InteractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikeVideo",
			Handler:    _InteractionService_LikeVideo_Handler,
		},
		{
			MethodName: "UnlikeVideo",
			Handler:    _InteractionService_UnlikeVideo_Handler,
		},
		{
			MethodName: "GetVideoLikeCount",
			Handler:    _InteractionService_GetVideoLikeCount_Handler,
		},
		{
			MethodName: "PostComment",
			Handler:    _InteractionService_PostComment_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _InteractionService_ListComments_Handler,
		},
		{
			MethodName: "FavoriteVideo",
			Handler:    _InteractionService_FavoriteVideo_Handler,
		},
		{
			MethodName: "UnfavoriteVideo",
			Handler:    _InteractionService_UnfavoriteVideo_Handler,
		},
		{
			MethodName: "ListFavorites",
			Handler:    _InteractionService_ListFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interaction/interaction.proto",
}
