// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: interaction/interaction.proto

package interaction

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInteractionServiceFavoriteVideo = "/interaction.InteractionService/FavoriteVideo"
const OperationInteractionServiceGetVideoLikeCount = "/interaction.InteractionService/GetVideoLikeCount"
const OperationInteractionServiceLikeVideo = "/interaction.InteractionService/LikeVideo"
const OperationInteractionServiceListComments = "/interaction.InteractionService/ListComments"
const OperationInteractionServiceListFavorites = "/interaction.InteractionService/ListFavorites"
const OperationInteractionServicePostComment = "/interaction.InteractionService/PostComment"
const OperationInteractionServiceUnfavoriteVideo = "/interaction.InteractionService/UnfavoriteVideo"
const OperationInteractionServiceUnlikeVideo = "/interaction.InteractionService/UnlikeVideo"

type InteractionServiceHTTPServer interface {
	// FavoriteVideo FavoriteVideo handles adding a video to favorites.
	FavoriteVideo(context.Context, *FavoriteVideoRequest) (*FavoriteVideoReply, error)
	// GetVideoLikeCount GetVideoLikeCount handles getting the like count for a video.
	GetVideoLikeCount(context.Context, *GetVideoLikeCountRequest) (*GetVideoLikeCountReply, error)
	// LikeVideo LikeVideo handles liking a video.
	LikeVideo(context.Context, *LikeVideoRequest) (*LikeVideoReply, error)
	// ListComments ListComments handles listing comments for a video.
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsReply, error)
	// ListFavorites ListFavorites handles listing a user's favorite videos.
	ListFavorites(context.Context, *ListFavoritesRequest) (*ListFavoritesReply, error)
	// PostComment PostComment handles posting a comment on a video or replying to a comment.
	PostComment(context.Context, *PostCommentRequest) (*PostCommentReply, error)
	// UnfavoriteVideo UnfavoriteVideo handles removing a video from favorites.
	UnfavoriteVideo(context.Context, *UnfavoriteVideoRequest) (*UnfavoriteVideoReply, error)
	// UnlikeVideo UnlikeVideo handles unliking a video.
	UnlikeVideo(context.Context, *UnlikeVideoRequest) (*UnlikeVideoReply, error)
}

func RegisterInteractionServiceHTTPServer(s *http.Server, srv InteractionServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/interaction/video/like", _InteractionService_LikeVideo0_HTTP_Handler(srv))
	r.POST("/interaction/video/unlike", _InteractionService_UnlikeVideo0_HTTP_Handler(srv))
	r.GET("/interaction/video/{video_id}/like_count", _InteractionService_GetVideoLikeCount0_HTTP_Handler(srv))
	r.POST("/interaction/video/comment", _InteractionService_PostComment0_HTTP_Handler(srv))
	r.GET("/interaction/video/{video_id}/comments", _InteractionService_ListComments0_HTTP_Handler(srv))
	r.POST("/interaction/video/favorite", _InteractionService_FavoriteVideo0_HTTP_Handler(srv))
	r.POST("/interaction/video/unfavorite", _InteractionService_UnfavoriteVideo0_HTTP_Handler(srv))
	r.GET("/interaction/user/{user_id}/favorites", _InteractionService_ListFavorites0_HTTP_Handler(srv))
}

func _InteractionService_LikeVideo0_HTTP_Handler(srv InteractionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LikeVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInteractionServiceLikeVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LikeVideo(ctx, req.(*LikeVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LikeVideoReply)
		return ctx.Result(200, reply)
	}
}

func _InteractionService_UnlikeVideo0_HTTP_Handler(srv InteractionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnlikeVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInteractionServiceUnlikeVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnlikeVideo(ctx, req.(*UnlikeVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnlikeVideoReply)
		return ctx.Result(200, reply)
	}
}

func _InteractionService_GetVideoLikeCount0_HTTP_Handler(srv InteractionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoLikeCountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInteractionServiceGetVideoLikeCount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVideoLikeCount(ctx, req.(*GetVideoLikeCountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVideoLikeCountReply)
		return ctx.Result(200, reply)
	}
}

func _InteractionService_PostComment0_HTTP_Handler(srv InteractionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PostCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInteractionServicePostComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PostComment(ctx, req.(*PostCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PostCommentReply)
		return ctx.Result(200, reply)
	}
}

func _InteractionService_ListComments0_HTTP_Handler(srv InteractionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCommentsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInteractionServiceListComments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListComments(ctx, req.(*ListCommentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCommentsReply)
		return ctx.Result(200, reply)
	}
}

func _InteractionService_FavoriteVideo0_HTTP_Handler(srv InteractionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FavoriteVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInteractionServiceFavoriteVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FavoriteVideo(ctx, req.(*FavoriteVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FavoriteVideoReply)
		return ctx.Result(200, reply)
	}
}

func _InteractionService_UnfavoriteVideo0_HTTP_Handler(srv InteractionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnfavoriteVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInteractionServiceUnfavoriteVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnfavoriteVideo(ctx, req.(*UnfavoriteVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnfavoriteVideoReply)
		return ctx.Result(200, reply)
	}
}

func _InteractionService_ListFavorites0_HTTP_Handler(srv InteractionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFavoritesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInteractionServiceListFavorites)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFavorites(ctx, req.(*ListFavoritesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFavoritesReply)
		return ctx.Result(200, reply)
	}
}

type InteractionServiceHTTPClient interface {
	FavoriteVideo(ctx context.Context, req *FavoriteVideoRequest, opts ...http.CallOption) (rsp *FavoriteVideoReply, err error)
	GetVideoLikeCount(ctx context.Context, req *GetVideoLikeCountRequest, opts ...http.CallOption) (rsp *GetVideoLikeCountReply, err error)
	LikeVideo(ctx context.Context, req *LikeVideoRequest, opts ...http.CallOption) (rsp *LikeVideoReply, err error)
	ListComments(ctx context.Context, req *ListCommentsRequest, opts ...http.CallOption) (rsp *ListCommentsReply, err error)
	ListFavorites(ctx context.Context, req *ListFavoritesRequest, opts ...http.CallOption) (rsp *ListFavoritesReply, err error)
	PostComment(ctx context.Context, req *PostCommentRequest, opts ...http.CallOption) (rsp *PostCommentReply, err error)
	UnfavoriteVideo(ctx context.Context, req *UnfavoriteVideoRequest, opts ...http.CallOption) (rsp *UnfavoriteVideoReply, err error)
	UnlikeVideo(ctx context.Context, req *UnlikeVideoRequest, opts ...http.CallOption) (rsp *UnlikeVideoReply, err error)
}

type InteractionServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewInteractionServiceHTTPClient(client *http.Client) InteractionServiceHTTPClient {
	return &InteractionServiceHTTPClientImpl{client}
}

func (c *InteractionServiceHTTPClientImpl) FavoriteVideo(ctx context.Context, in *FavoriteVideoRequest, opts ...http.CallOption) (*FavoriteVideoReply, error) {
	var out FavoriteVideoReply
	pattern := "/interaction/video/favorite"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInteractionServiceFavoriteVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InteractionServiceHTTPClientImpl) GetVideoLikeCount(ctx context.Context, in *GetVideoLikeCountRequest, opts ...http.CallOption) (*GetVideoLikeCountReply, error) {
	var out GetVideoLikeCountReply
	pattern := "/interaction/video/{video_id}/like_count"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInteractionServiceGetVideoLikeCount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InteractionServiceHTTPClientImpl) LikeVideo(ctx context.Context, in *LikeVideoRequest, opts ...http.CallOption) (*LikeVideoReply, error) {
	var out LikeVideoReply
	pattern := "/interaction/video/like"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInteractionServiceLikeVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InteractionServiceHTTPClientImpl) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...http.CallOption) (*ListCommentsReply, error) {
	var out ListCommentsReply
	pattern := "/interaction/video/{video_id}/comments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInteractionServiceListComments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InteractionServiceHTTPClientImpl) ListFavorites(ctx context.Context, in *ListFavoritesRequest, opts ...http.CallOption) (*ListFavoritesReply, error) {
	var out ListFavoritesReply
	pattern := "/interaction/user/{user_id}/favorites"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInteractionServiceListFavorites))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InteractionServiceHTTPClientImpl) PostComment(ctx context.Context, in *PostCommentRequest, opts ...http.CallOption) (*PostCommentReply, error) {
	var out PostCommentReply
	pattern := "/interaction/video/comment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInteractionServicePostComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InteractionServiceHTTPClientImpl) UnfavoriteVideo(ctx context.Context, in *UnfavoriteVideoRequest, opts ...http.CallOption) (*UnfavoriteVideoReply, error) {
	var out UnfavoriteVideoReply
	pattern := "/interaction/video/unfavorite"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInteractionServiceUnfavoriteVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *InteractionServiceHTTPClientImpl) UnlikeVideo(ctx context.Context, in *UnlikeVideoRequest, opts ...http.CallOption) (*UnlikeVideoReply, error) {
	var out UnlikeVideoReply
	pattern := "/interaction/video/unlike"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInteractionServiceUnlikeVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
